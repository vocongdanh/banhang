version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - banhang_test_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot service for SSL certificates
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Laravel Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    expose:
      - "9000"
    volumes:
      - ./backend:/var/www/html
      - /var/www/html/vendor
      - /var/www/html/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=testing
      - APP_DEBUG=true
      - APP_URL=https://test.banhang.ai
    restart: always
    command: sh -c "php-fpm"
    networks:
      - banhang_test_network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - ./env.frontend.test:/app/.env
    depends_on:
      - backend
    restart: always
    command: sh -c "cp /app/.env /app/.env.production && rm -f /app/.env.local && npm run build && npx next start"
    networks:
      - banhang_test_network
    environment:
      - NEXT_PUBLIC_API_URL=https://test.banhang.ai/api
      - NEXT_PUBLIC_BACKEND_URL=https://test.banhang.ai
      - NEXT_PUBLIC_APP_ENV=testing

  # Python AI Service
  python-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    expose:
      - "5000"
    volumes:
      - ./ai-service:/app
      - /app/venv
    depends_on:
      - qdrant
      - redis
    restart: always
    networks:
      - banhang_test_network

  # Qdrant Vector Store
  qdrant:
    image: qdrant/qdrant
    expose:
      - "6333"
    volumes:
      - qdrant_test_data:/qdrant/storage
    restart: always
    networks:
      - banhang_test_network

  # MySQL Database
  mysql:
    image: mariadb:10.6
    expose:
      - "3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=banhang_test
    volumes:
      - mysql_test_data:/var/lib/mysql
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - banhang_test_network

  # Redis Cache
  redis:
    image: redis:alpine
    expose:
      - "6379"
    volumes:
      - redis_test_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - banhang_test_network

  # PhpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    expose:
      - "80"
    environment:
      - PMA_HOST=mysql
      - MYSQL_ROOT_PASSWORD=root
    depends_on:
      - mysql
    networks:
      - banhang_test_network

volumes:
  qdrant_test_data:
  mysql_test_data:
  redis_test_data:

networks:
  banhang_test_network:
    driver: bridge 